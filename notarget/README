** notarget 1989.6.4 (codename falun)


1. 原理
-------------
notarget 是基于 TTL 构造对 IPS 进行注入攻击的演示程序。现在常见的入侵防御系统（IPS）都会对 TCP 通信进行有状态的检测，它们会实现比较标准的 TCP/IP 栈并利用其中间人网络拓扑位置的优势进行会话重建。但是它们也有弱点。

1998 年 Thomas H. Ptacek 等发表了一篇重要论文“Eluding Network Intrusion Detection”，这是网络安全必读论文。其中描述了一种让入侵检测失效的攻击策略：注入法（insertion）。即通过利用 IPS 对 TCP/IP 协议实现与通信终端的微妙差异或者网络拓扑结构，让 IPS 检测并处理一些通信终端并没有收到或者没有处理的数据，从而能够向 IPS “注入”任意数据。如果巧妙构造报文，便可引起 IPS 内特定事件的发生，比如会话连接关闭或者建立会话，我们称之向 IPS 注入特定事件。而 IPS 检测的主要内容是 TCP 通信的数据荷载，如果在会话中向 IPS 注入连接关闭事件，那么注入之后的通信 IPS 不会进行检测，也就是说只要在可能触发 IPS 攻击行为的字串出现之前进行注入便可在 IPS 的检测下会话隐身（notarget 作弊）。

实施注入的具体方法在 Ptacek98 中介绍了多种，其中最简便和难以阻止的方法就是根据网络拓扑对 IP 报头的 TTL 字段进行特别设置，使该报文能够通过 IPS 的检测，但是却无法达到目标主机。这种 TTL 经特别设置的报文对于 IPS 来说判别真伪的唯一特征也就是 TTL。然而特别是处于长网络路径中间节点的 IPS 对其两端的网络拓扑缺乏了解，而且其两端较长距离内的动态路由也给距离带来了变数，所以根据 TTL 来判断单个报文的真伪也是非常困难的。所以基于 TTL 的注入法就是针对这种网络拓扑位置带来的先天弱点的最有效攻击方法。思科在“TTL Expiry Attack Identification and Mitigation”提出在中小型网络边界过滤低 TTL 报文，前提是网络规模不大从而可以准确计算出过滤阈值，虽然这的确可以避免 IPS 遭到注入，但这并非 IPS 的检测策略，而且大型网络边界上很难确定一个准确无误伤的过滤阈值。而如果 IPS 试图根据同一会话的初始报文 TTL 来判断后续报文的真伪，那么这恰恰为 Ptacek98 提出的另一种 IPS 攻击策略“闪避法”（evasion）打开了大门。

通信终端需要特别设置某些特定报文的 TTL 值进行注入以达到会话隐身的目标，那么 TTL 值应该是多少呢？显然，从本机到达每个 IP 都可能有不同的路径距离（跳数），因此需要对每个 IP 都计算跳数。2007 年 Wang Haining等的论文“Defense Against Spoofed IP Traffic Using Hop-Count Filtering”描述了这样一种方法，通过监视流量提取出 TTL，并根据常见的初始 TTL 推算出跳数。这样维护一个 IP2HC 表，使得给定 IP 地址可以快速得到跳数。不过由于初始 TTL 的推测带来了更多的误差，实际上可以采取类似 traceroute 的方法进行较为准确的跳数计算。

2. 实现
-------------
 * 流量截获与注入
最初使用了 libpcap 来截获流量，后来出于简化的想法改成了用 recvfrom 一个 raw socket 来听。出于性能考虑开一个线程来听包。当听到 SYN/ACK 的时候查一下表，如果有值直接注入一个 RST/ACK，如果没有值说明是新连接送进异步队列待新建跳数测量任务；当听到 RST 时候可能是 ping 回复也可能是 IPS 攻击，也送进异步队列待处理。

 * ip2hop 表
ip2hop 给定 ip 便可查到跳数。用散列来提高查询速度。隔一定时间就将 ip2hop 表保存到文件。

 * 跳数测量
初始测量。向目标发出 TTL 连续变化的若干报文并等待回复。考虑 ICMP 和 UDP 被过滤的情况，使用在开放端口上的 TCP ping 最为可靠。为了避免被识别为 SYN 洪水以及避免被 IPS 的伪造 SYN/ACK 会话劫持攻击所干扰，采用 ACK ping，同时由于“在继发攻击中产生一个 RST 的充要条件是截获一个报文的 SYN、FIN、RST 位同时为零……”，设置 FIN 位以避免被 IPS 的伪造 RST 会话干扰攻击所干扰。特别设置端口和应答号在其中包含 TTL 的信息从而能够从回复的端口号和序列号中直接算出“原 TTL”。预期从异步队列中获得一些 RST，其中最小的原 TTL 就是跳数。如果异步队列中得到了与跳数测量无关的 RST 则显示出来。

验证测量。尽管 Wang07 提出跳数变化缓慢，但是在某些地方的测量发现跳数依然由于动态路由的原因在几个值之中频繁变化。由于需要保证注入报文一定不能达到目标，所以必须验证初始测量所得跳数是否一直是最小值。发一些包，TTL 都设置为当前跳数减一，其他特性与初始测量一样，看是否有回复。如果有说明跳数还需要减一继续验证，直到没有回复。由于动态路由造成路径是概率事件，验证测量发送的包越多则跳数是最小值的可信度越高，另一方面也不能发送过多，否则可能引起过滤。如果用户确定所在网络跳数变化不频繁，建议禁用此功能。

3. 编译和运行
-------------
notarget 目前只在 Debian GNU/Linux 5.0.2 上进行了编译和测试，其他 Linux 发行版可自行调整设置，其他操作系统可自行移植。当然，这是 demo，其意义在于用户根据自己需要移植相关代码或者利用其原理进行更好的实现。notarget 依赖 libnet 和 glib。具体选项可自行修改 Makefile。

notarget 听包写包都需要特权。几个可能需要解释的参数：

  --expire=N         经过测量的最小跳数在经过 N 秒以后过期需要重新测量。
                     1这是应对跳数的长周期变化。

  --retrace-range=N  当跳数过期之后重新测量时，
                     1只测量过期跳数上下 N 之内的 TTL 以提高性能。

  --update=N         每 N 秒检查跳数过期并保存 ip2hop 表。

  -y, --verify=N     验证测量的重复次数。默认设为 0 禁用。
                     1确定重复次数需要一些经验，不太容易。

  --wait=N           测量 ping 的回复应该在 N 秒之内收到。

~/.tracehop的格式为：
printf("%s %08x %04x %hhu %08x", name, addr_netbyte, port_hostbyte, hop, time)
其中跳数为 0 表明目标不可达。

4. 限制
-------------
 * 使用 recvfrom 在收到 SYN/ACK 之后查 ip2hop 得到跳数构造报文在发送，这在某些情况下可能延迟过长，在触发性数据送出之后 RST/ACK 才送出，导致在触发 IPS 之后才注入，从而会话隐身失败。
 * 如果跳数变动过大而目标距离 IPS 很近，在理论上难以保证 TTL 的正确性。
 * ACK ping 可能被目标或者路径上的防火墙过滤导致跳数为 0（目标不可达）。而如果进行 SYN ping，那么需要仔细观察通信上下文排除 IPS 伪造的 SYN/ACK，并且在验证测量阶段需要仔细设置延时避免被识别为 SYN 洪水而被过滤。这些在实现上有点麻烦，在此 demo 中没有实现。
 * 必须在与某 ip 有一次通信之后，才能在与该 ip 的后续通信中保持隐身。
 * 如果触发了 IPS 的原发攻击，由于继发攻击是无状态的，因此在继发攻击的时段内隐身无效（隐身不是无敌）。
 * IPS 会对特定站点（比如 zh.wikipedia.org 所在 ip）进行深度检测，具有特殊的表现。即使注入成功，在后续通信中该站点发出的数据仍然可能触发攻击。
 * 这个方法的基础是 IP 协议，所以无法实现面向关键词的隐身，只能实现面向地址的隐身。

5. TODO
-------------
作为 demo，提出一些 todo 只是提供可以实现的方向，本身不会再实现了。
 * 在更完善的项目中用 libpcap 替用 recvfrom 实现更好的听包，并在听到 SYN 就进行注入以保证在触发性数据之前送出 RST。当然如果改在 SYN 时候进行注入，其他方面也要做相应调整，不再赘述。
 * 可配置的站点策略，对哪些站点进行预先跳数测量和会话隐身，或者对哪些站点不测量不隐身。
 * 提高 ip2hop 的性能，处于同一子网的 ip 只测量一次。
 * 使用多种协议进行测量，实现基于 ICMP、UDP 等 ping 方式，提高稳定性和正确率。
 
6. 关于
-------------
BSD 许可证。详见 COPYING。

作者 KLZ毕业 <klzgrad@gmail.com>。

项目在 http://code.google.com/p/hmmm。
