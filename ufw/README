
*** BNF EXPREESION ***********************************************************

BNF - precedence from high to low seperated by empty line
"literal"           - literal, case-insensitive, no escape
<def>               - direct definition

(rule1 rule2)       - group
[rule]              - optional & group

rule*               - repetition >= 0
rule+               - repetition >= 1

rule1 | rule2       - alternatives

name = def          - definition





*** LINE SYNTAX **************************************************************

Whitespaces between tokens are generally ignored.
		
LINE    = [CTL ";"] [ IP ";"] TCP | CTL ";" IP ";" UDP | ":" UDP
  colon ":" can be considered as "jump to payload".

CTL     = ("x" <integer> | "*" <real> | "/" <real>)*
  control rules:
  xn - repeat the rest of the line n times
  *f - sleep for f seconds
  /  - sleep for f useconds


IP      = [ TTL ]
TTL     = <integer>
  ttl:
  set the absolute value of ttl

TCP     = FLAGS ["," SEQ ["," ACK ["," PAYLOAD]]] | FLAGS ":" PAYLOAD

FLAGS   = ("S" | "A" | "F" | "R" | "P" | "U" | "C" | "E")*
  respectively SYN ACK FIN RST PSH URG CWR ECE

SEQ     = [ TCP_SEQ ]
ACK     = [ TCP_SEQ ]
TCP_SEQ = [( "]" | "[" | "+" | "-" | "~" )] <integer>
  ufw maintains the four sequential numbers:
  ISN - initial sequence number of the client
          in active mode, ISN is randomly choosen
          in passive mode, ISN = the first received seq
  IAN - initial sequence number of the server
          in active mode, IAN = the first received seq
          in passive mode, IAN = the first received ack - 1
  SEQ - current sequence number of the client
          in active mode, SEQ will autoincrement only by sent payload size
  ACK	-	current acknowledgement number of the client
          in active mode, ACK will autoincrement only by received payload size
 (in passive mode, no sending requires internally maintained SEQ/ACK)

  sequential offset:
  ]n - send seq/ack as SEQ/ACK + n
  [n - send seq/ack as SEQ/ACK - n
  +n - SEQ/ACK += n, and send seq/ack as SEQ/ACK
  -n - SEQ/ACK -= n, and send seq/ack as SEQ/ACK
  ~n - send seq/ack as ISN/IAN + n
  n - send seq/ack as n
  when null, send seq/ack as SEQ/ACK

UDP     = PAYLOAD
PAYLOAD = "\f"<filename> | "\e"<sh> 
          | ( <any except "\" CR LF> | "\\" "\r" "\n" )*
  note that white spaces after "\f" are treated as part of the filename,
  the same as "\e".





*** PACKET PRINTABLE FORMAT **************************************************

PACKET   = TIME " " IPH ["|" (TCPH | UDPH) [LF PAYLOAD "-- APPDATA EOF"]] LF 

TIME     = <%.6f>

IPH      = IPHE | [IPTOS " "] IPID " " IPFRAG " " [IPOFF " "] IPTTL " " 
                  IPSADDR ">" IPDADDR [" " IPOPTS]
IPHE     = "[IP PACKET SIZE MORE THAN RECEIVED]"
         | "[IP PACKET SIZE LESS THAN RECEIVED]"
         | "[IP HEADER LENGTH INVALID]"
         | "[IP HEADER LENGTH INSUFFICIENT]"
IPTOS    = "tos:" ["D"] ["T"] ["R"] ["C"] ["n"] ["I"] ["c"] ["F"] ["f"] ["i"]
                ["p"]["r"]
  respectively, IPTOS_LOWDELAY, IPTOS_THROUGHPUT, IPTOS_RELIABILITY
   IPTOS_LOWCOST, IPTOS_PREC_NETCONTROL, IPTOS_PREC_INTERNETCONTROL
   IPTOS_PREC_CRITIC_ECP, IPTOS_PREC_FLASHOVERRIDE, IPTOS_PREC_FLASH
   IPTOS_PREC_IMMEDIATE, IPTOS_PREC_PRIORITY, IPTOS_PREC_ROUTINE
   as in <netinet/ip.h>

IPID     = <%5u>
IPFRAG   = ("R" | "_") ("D" | "_") ("M" | "_")
IPOFF    = "off:" <%04x>
IPTTL    = <%3u> " "
IPSADDR  = <%15s>
IPDADDR  = <%-15s>
IPOPTS   = "[" <opts len> "]" <opts in hex>

TCPH     = TCPHE | SPORT ">" DPORT " " SEQ ":" ACK " " WND " " [X2 " "]
                   "[" FLAGS "]" [" " TCPOPTS] [" " PLSIZE]
UDPH     = UDPHE | SPORT ">" DPORT [" " PLSIZE]
TCPHE    = "[TCP HEADER LENGTH INVALID]" | "[TCP HEADER LENGTH INSUFFICIENT]"
UDPHE    = "[UDP HEADER LENGTH INVALID]" | "[UDP HEADER LENGTH INSUFFICIENT]"
SPORT    = <%5u>
DPORT    = <%-5u>
SEQ      =
ACK      = <relative, %d>
WND      = <%u>
X2       = "x2:" <%1x>
FLAGS    = <as defined above>
TCPOPTS  = <TODO>
PLSIZE   = "(" <%u> ")"

PAYLOAD  = (<ASCII printable> | ".")*
         | (<ASCII printable> | <hex escape>)*
         | <verbatim>*
